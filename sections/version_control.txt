Collaboration on a software project requires that developers have concurrent access to source code. With this it becomes necessary to keep track of changes and, effectively manage how work and knowledge about the work-in-progress are shared, and to be able to move efficiently between updates to the source code. Version control systems (VCS) are employed by programmers to mitigate these issues by storing code in directories referred to as repositories, which hold details about the history of the project, contributions, and other useful metrics. (Bird et al. 2009) (Carlsson 2013) \emph{Centralized version control} systems, such as Subversion and Concurrent Versioning System [cite] host the code [at a single location, and_____], [cite], while \emph{decentralized version control} (DVC), such as git, operate on a peer-to-peer model, enabling all or part of a repository to be stored locally on all machines affiliated with the project, (O’Sullivan 2009) thereby facilitating temporally and geographically displaced contributions, offline work, and simultaneous document editing. (Kalliamvakou et al 2014) Github, a popular DVC platform built on top of git, offers developers with a cloud-based hosting service for project repositories. 
The DVC workflow comprises three primary actions: the retrieval of up-to-date code from the remote repository to a local repository on the developer’s machine, called a \emph{pull request}; the logging of the modification of work in the local repository, called a \emph{commit}; and the uploading of files staged in commits, called a \emph{push}. 
